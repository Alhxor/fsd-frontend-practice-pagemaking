mixin option(props)
  script.
    function changeValueByOne(refBtnDec, refValue, increment = true) {
      const change = increment ? 1 : -1
      const value = parseInt(refValue.textContent)
      const newValue = value + change

      if (newValue === 0) // no more decrements allowed, disable button
        refBtnDec.classList.add("increment--disabled")
      
      if (value === 0 && newValue === 1) // enable it back
        refBtnDec.classList.remove("increment--disabled")
      
      refValue.textContent = newValue
    }
  .option
    span.option__name= props.name
    .option__controls
      button.increment(
        onclick="changeValueByOne(this, this.nextSibling, increment = false)",
        class=`${props.value === 0 ? "increment--disabled" : ""}`
      ) -
      span= props.value
      button.increment(
        onclick="changeValueByOne(this.previousSibling.previousSibling, this.previousSibling, increment = true)"
      ) +

//- TODO: deal with style dependencies on .input (extract them or something)
mixin dropdown(props)
  script.
    document.addEventListener("DOMContentLoaded", () => {
      let id = "#{props.id}"
      let toggle = document.getElementById(id)
      toggle.addEventListener("click", () => {
        let content = document.querySelector(`#${id}+.dropdown__content`)
        content.classList.toggle("hidden")
      })
    })
  .input
    label.input__label(for=props.id)
      span.input__title= props.title
      span.input__description= props.description
    .dropdown-container
      button.dropdown(id=props.id)
        span.dropdown__select= props.select
        i.dropdown__icon-expand
      .dropdown__content
        each item in props.options
          +option(item)
        .dropdown__controls
          button.dropdown__control.dropdown__control--gray Очистить
          button.dropdown__control Применить
